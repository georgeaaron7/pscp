#include <iostream>

class Stack {
public:
    int topIndex;
    int capacity;
    int* arr;

    Stack(int cap) {
        topIndex = -1;
        capacity = cap;
        arr = new int[capacity];
    }

    ~Stack() {
        delete[] arr;
    }

    bool push(int v) {
        if (topIndex == capacity - 1) {
            return false; // Stack is full
        } else {
            arr[++topIndex] = v;
            return true;
        }
    }

    int pop() {
        if (topIndex == -1) {
            return 0; // Stack is empty
        } else {
            return arr[topIndex--];
        }
    }

    bool isEmpty() {
        return topIndex == -1;
    }
};

int evaluatePostfix(const char* postfix) {
    int length = 0;
    while (postfix[length] != '\0') {
        length++;
    }

    Stack stack1(length);

    for (int i = 0; i < length; ++i) {
        char currentChar = postfix[i];

        if (currentChar >= '0' && currentChar <= '9') {
            stack1.push(currentChar - '0'); // Convert character to integer and push
        } else {
            // Operator
            int operand2 = stack1.pop();
            int operand1 = stack1.pop();

            switch (currentChar) {
                case '+':
                    stack1.push(operand1 + operand2);
                    break;
                case '-':
                    stack1.push(operand1 - operand2);
                    break;
                case '*':
                    stack1.push(operand1 * operand2);
                    break;
                case '/':
                    stack1.push(operand1 / operand2);
                    break;
            }
        }
    }

    return stack1.pop();
}

int main() {
    const int maxLength = 100;
    char postfixExpression[maxLength];

    std::cout << "Enter postfix expression: ";
    std::cin.getline(postfixExpression, maxLength);

    int result = evaluatePostfix(postfixExpression);

    std::cout << "Result: " << result << std::endl;

    return 0;
}
