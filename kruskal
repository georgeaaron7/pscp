#include <iostream>
using namespace std;
const int MAX_VERTICES = 1000;
const int MAX_EDGES = 1000;
struct Edge {
    int src, dest, weight;
};
struct Subset {
    int parent;
    int rank;
};
class Graph {
    int V, E;
    Edge edges[MAX_EDGES];
public:
    Graph(int V, int E) : V(V), E(E) {}
    void addEdge(int src, int dest, int weight) {
        edges[E].src = src;
        edges[E].dest = dest;
        edges[E].weight = weight;
        E++;
    }
    int find(Subset subsets[], int i) {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);
        return subsets[i].parent;
    }
    void Union(Subset subsets[], int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);
        if (subsets[xroot].rank < subsets[yroot].rank)
            subsets[xroot].parent = yroot;
        else if (subsets[xroot].rank > subsets[yroot].rank)
            subsets[yroot].parent = xroot;
        else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }
    void kruskalMST() {
        Edge result[V];
        int e = 0;
        int i = 0;
        sortEdges();
        Subset *subsets = new Subset[V];
        for (int v = 0; v < V; v++) {
            subsets[v].parent = v;
            subsets[v].rank = 0;
        }
        while (e < V - 1 && i < E) {
            Edge next_edge = edges[i++];
            int x = find(subsets, next_edge.src);
            int y = find(subsets, next_edge.dest);
            if (x != y) {
                result[e++] = next_edge;
                Union(subsets, x, y);
            }
        }
        cout << "Edges in the constructed MST:" << endl;
        for (int j = 0; j < e; ++j)
            cout << result[j].src << " -- " << result[j].dest << " == " << result[j].weight << endl;
        delete[] subsets;
    }
private:
    void sortEdges() {
        for (int i = 0; i < E; i++) {
            for (int j = 0; j < E - 1 - i; j++) {
                if (edges[j].weight > edges[j + 1].weight) {
                    Edge temp = edges[j];
                    edges[j] = edges[j + 1];
                    edges[j + 1] = temp;
                }
            }
        }
    }
};
int main() {
    int V = 4; // Number of vertices in graph
    int E = 5; // Number of edges in graph
    Graph graph(V, E);
    // add edge 0-1
    graph.addEdge(0, 1, 10);
    // add edge 0-2
    graph.addEdge(0, 2, 6);
    // add edge 0-3
    graph.addEdge(0, 3, 5);
    // add edge 1-3
    graph.addEdge(1, 3, 15);
    // add edge 2-3
    graph.addEdge(2, 3, 4);
    // Function call
    graph.kruskalMST();
    return 0;
}
